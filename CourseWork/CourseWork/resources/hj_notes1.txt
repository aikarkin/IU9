coord		...	x_1		x_2		x_3		x_4		x_5		x_6	...

meaning			x		y		z		alpha	betta	gamma
step			h1		h2		h3		h4		h5		h6
precission		e1		e2		e3		e4		e5		e6


termination cond:   **(h_i < e_i)**


x_ 			  		  — vector of coordinates (x_1, ..., x_n)
B = (x, y, z) 		  —	barycenter

(alpha, betta, gamma) —	rotation around axis (BX, BY, BZ)

_______________________________________________________________

CellLinkedLists		grid[n][m][k]: Atom
	* each Atom have ptr to parent Molecule
	* mols[n_]: Molecule
addMol(Molecule mol) { 
	for atom in mol: grid[i][j][k] = atom; 
	mols.add(mol)
}
moveMol(mol_idx, move_op, val) {
	mols[mol_idx].move(move_op, val);
}
neigbourDist(mol_idx) => { total sum of distances for mols[mol_idx] to neighbour atoms}


## 	HJOptimize(x_, coord_steps, precision, opt_func)  ##
* At intial step we calculate total sum: all neighbour sums for each molecule
* In OptFunc: 	
	let i – number of iteration, then
	  i/6 – index of molecule in CLL
	  i%6 – number if operation (translate/rotate in matched directions)
	  h_i – moving step
	cll.MoveMol(i/6, i%6, h_i);
	check neighbourDist(i/6);
	if total sum decreased:
	   	x_i += h_i;
	else
		cll.MoveMol(i/6, i%6, -h_i); // <–– return mol back
* Thus, OptFunc – functor, which stores CLL
* OptFunc takes only one argument – number of iteration

_______________________________________________________________

!! Структуры данных

1.  AXIS {X, Y, Z}

2.	MOVE_OP { 
				ROT_X,	 ROT_Y,	  ROT_Z, 
				TRANS_X, TRANS_Y, TRANS_Z
			}

3.  Molecule
	- atoms[m]
	- bonds[l]
	- mol_id = 0
	+ translate(trans_vec)
	+ rotate(angle, AXIS)
	
4.	CellLinkedLists
	- aGrid[n][m][k] :	list<Atom>
	- mols[n_]
	+ addMol(mol)
	+ addMols(container, mols_count) [*]
	+ moveMol(mol_idx, MOVE_OP, val)
	+ neighbourDist(mol_idx)

Atom
	...
	- parent_mol

!! Алгоритм !!

* Шаг 0. Инициализация: 
	1) формируем решетку, все молекулы располагаем на одинаковом друг от друга расстоянии;
	2) перенумеруем молекулы от 0 до 1 (для каждой молекулы mol_i, mol_i.mol_id = i);
	3) каждую молекулу добавим в CellLinkedLists (добавлять будем в том порядке в котором пронумеровали); 
	4) сформируем три вектора, необходимых для работы алгоритма Хука-Дживса:
		– вектор координат:		x_ = (x_1, y_1, z_1, a_1, b_1, g_z, ...)
		– вектор шагов:			h_ = (h_1, h_2, ...) // – сдвиги вдоль координат с соотв. индексом 
		– вектор погрешностей:	e_ = (e_1, ...)
		[*] для экономии памяти целесообразно использовать функции для соотв. индекса, возвращающие текущ. погрешность и шаг:
			h(i) => float
			e(i) => float
	5) с помощью CLL.neighbourSum(..) расчитаем общую сумму расстояний между молекулами totalSum, далее эта сумма будет обновяться
	6) оптимизирующая функция
		(А) определим функтор OptFunc[cll, totalSum](it_num), обновляюзий сумму totalSum и возвращающий её новое значение 
			(тем самым абстрагируемся от функции, вычисляющей целевую функцию и от способа её вычисления: 
																OptFunc – произвольный функтор, принимающий шаг итерации)
		(Б)	определим функцию оптимизации Хука-Дживса несколько иначе: пусть она принимает функцию F(it_num, h), и сумму totalSum, 
			и  возвр. новую сумму (будем обновлять эту сумму во время выполнения, тем самым абстрагировались лишь от функции, но не от способа
			ее вычисления; теперь наша реализация алгоритма Хука-Дживса будет работать только в тех случаях, когда сумму можно обновить на 
			каждом шаге).
	7) число молекул должно быть больше чем, начальное, поскольку после упаковки они будут ближе друг к другу
* Шаг 1. Исследующий поиск.
	Пробегаем по всем координатам вектора x_ = (..x_i..)
		h_i = h(i)
		e_i = e(i)
		
		sum0 = F(i, 0) 	 	// без изменения координаты
		sum1 = F(i, -h_i) 	// уменьшаем координату
		sum2 = F(i, h_i)	// увеличиваем координату
						
		if ( min(i=0..2, sum_i)==sum0 )
			dec h_i //  (похоже h все-таки массив (в принципе его можно рассматривать как отображение, что стоит отметить в записке), 
						но e – не обязательно)
		else
			x += (-1)^i * h_i
		
		если для любого i: h_i < e_i,
			завершаем алгоритм
	В итоге получили новый вектор x1_.
* Шаг 2. Поиск по образцу.
	Вычисляем новую точку:
		x2_ = x_ + k * (x1_ - x_)
		x_ = x_2
	Проводим исследующий поиск, но шаг при этом не уменьшаем. В результате чего получаем точку x3_
	Если x3_ != x_2
		x1_ = x_;
		x3_ = x_1;
		повтор [шага 2]
	Иначе
		x1_ = x;
		переходим к [шагу 1]
* Шаг 3. Завершение.
	1) выкинем молекулы, которые не вошли в бокс
	2) выведем результат	


____________________________________________________________________


DistFunc(atom1, atom2) => float

CellLinkedLists (vec<Molecule>, cellLen, distFunc) | (cellLen, distFunc)
	+addMol(Molecule)
	+formCellLinkedLists()
	+moveMol(mol_ind, moveOp, val)
	+calcMolDist(mol_ind)
	
	
	-cllFormed: bool
	-mols: vec<Molecule>
	-grid[n][m][k]: list<Atom>
	
